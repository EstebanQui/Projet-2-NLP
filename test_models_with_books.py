#!/usr/bin/env python3
"""
Script de test pour v√©rifier que les mod√®les utilisent les donn√©es des livres Harry Potter
"""

import os
import json
import torch
from iteration_3_sentiment_pytorch import SimpleTokenizer, SentimentClassifier, predict_sentiment
from iteration_3_text_generation_pytorch import PoemDataset, PoemGenerator, generate_poem

def test_sentiment_model_with_books():
    """Tester le mod√®le d'analyse de sentiment avec des phrases des livres"""
    
    print("=" * 60)
    print("TEST DU MOD√àLE D'ANALYSE DE SENTIMENT AVEC LES LIVRES")
    print("=" * 60)
    
    try:
        # Charger le mod√®le de sentiment
        with open('tokenizer.json', 'r', encoding='utf-8') as f:
            tokenizer_data = json.load(f)
        
        tokenizer = SimpleTokenizer()
        tokenizer.word_to_id = tokenizer_data['word_to_id']
        tokenizer.id_to_word = tokenizer_data['id_to_word']
        
        model = SentimentClassifier(
            vocab_size=len(tokenizer.word_to_id),
            embedding_dim=128,
            hidden_dim=256,
            num_classes=3,
            num_layers=2
        )
        
        model.load_state_dict(torch.load('sentiment_model.pth', map_location='cpu'))
        print("Mod√®le de sentiment charg√© avec succ√®s !")
        
        # Phrases de test (fran√ßais + anglais des livres)
        test_phrases = [
            # Fran√ßais
            "J'adore ce produit, il est fantastique !",
            "Service terrible, tr√®s d√©√ßu.",
            "Fonctionne normalement, rien de sp√©cial.",
            
            # Anglais (des livres Harry Potter)
            "The magical world was wonderful and exciting.",
            "The dark wizard was terrifying and evil.",
            "The castle looked beautiful in the sunlight.",
            "Harry felt happy and excited about his new school.",
            "The forest was dark and dangerous.",
            "The potion smelled terrible and looked disgusting.",
            "The weather was normal for this time of year.",
            "The book was interesting but nothing special."
        ]
        
        print(f"Test de {len(test_phrases)} phrases...")
        print("-" * 50)
        
        for i, phrase in enumerate(test_phrases, 1):
            result = predict_sentiment(phrase, model, tokenizer)
            print(f"{i:2d}. '{phrase}'")
            print(f"    ‚Üí {result['sentiment_name']} (Confiance: {result['confidence']:.2f})")
            print()
        
        return True
        
    except FileNotFoundError as e:
        print(f"Erreur: {e}")
        print("Veuillez d'abord entra√Æner le mod√®le avec: python iteration_3_sentiment_pytorch.py")
        return False

def test_text_generation_with_books():
    """Tester le mod√®le de g√©n√©ration de texte avec les livres"""
    
    print("=" * 60)
    print("TEST DU MOD√àLE DE G√âN√âRATION DE TEXTE AVEC LES LIVRES")
    print("=" * 60)
    
    try:
        # Charger le mod√®le de g√©n√©ration
        with open('poem_vocab.json', 'r', encoding='utf-8') as f:
            vocab_data = json.load(f)
        
        dataset = PoemDataset([])
        dataset.char_to_idx = vocab_data['char_to_idx']
        dataset.idx_to_char = vocab_data['idx_to_char']
        
        model = PoemGenerator(
            vocab_size=len(dataset.idx_to_char),
            embedding_dim=256,
            hidden_dim=512,
            num_layers=3,
            dropout=0.3
        )
        
        model.load_state_dict(torch.load('poem_generator.pth', map_location='cpu'))
        print("Mod√®le de g√©n√©ration charg√© avec succ√®s !")
        
        # Prompts de test (fran√ßais + anglais)
        test_prompts = [
            # Fran√ßais
            "Les feuilles mortes tombent sur le sol,",
            "Le soleil brille dans le ciel bleu,",
            "Tes yeux brillent comme des √©toiles,",
            
            # Anglais (inspir√©s des livres Harry Potter)
            "Harry Potter was a wizard,",
            "The magical castle stood tall,",
            "In the dark forest,",
            "The potion was bubbling,",
            "The wand glowed brightly,"
        ]
        
        print(f"Test de g√©n√©ration avec {len(test_prompts)} prompts...")
        print("-" * 50)
        
        for i, prompt in enumerate(test_prompts, 1):
            print(f"{i}. Prompt: '{prompt}'")
            generated_text = generate_poem(prompt, model, dataset, max_length=200)
            print(f"   G√©n√©r√©: {generated_text}")
            print()
        
        return True
        
    except FileNotFoundError as e:
        print(f"Erreur: {e}")
        print("Veuillez d'abord entra√Æner le mod√®le avec: python iteration_3_text_generation_pytorch.py")
        return False

def check_books_data():
    """V√©rifier que les donn√©es des livres sont disponibles"""
    
    print("=" * 60)
    print("V√âRIFICATION DES DONN√âES DES LIVRES")
    print("=" * 60)
    
    books_dir = "books"
    if not os.path.exists(books_dir):
        print("Dossier 'books' non trouv√© !")
        return False
    
    books_files = [f for f in os.listdir(books_dir) if f.endswith('.txt')]
    
    if not books_files:
        print("Aucun fichier .txt trouv√© dans le dossier 'books' !")
        return False
    
    print(f"{len(books_files)} fichiers trouv√©s dans le dossier 'books':")
    for book_file in books_files:
        filepath = os.path.join(books_dir, book_file)
        size = os.path.getsize(filepath)
        print(f"{book_file} ({size:,} octets)")
    
    return True

def main():
    """Fonction principale de test"""
    
    print("TEST DES MOD√àLES AVEC LES DONN√âES DES LIVRES HARRY POTTER")
    print("=" * 70)
    
    # V√©rifier les donn√©es des livres
    if not check_books_data():
        print("\nImpossible de continuer sans les donn√©es des livres.")
        return
    
    print("\n" + "=" * 70)
    
    # Tester le mod√®le de sentiment
    sentiment_ok = test_sentiment_model_with_books()
    
    print("\n" + "=" * 70)
    
    # Tester le mod√®le de g√©n√©ration
    generation_ok = test_text_generation_with_books()
    
    print("\n" + "=" * 70)
    print("üìã R√âSUM√â DES TESTS")
    print("=" * 70)
    
    if sentiment_ok and generation_ok:
        print("TOUS LES TESTS R√âUSSIS !")
        print("Les mod√®les utilisent bien les donn√©es des livres Harry Potter")
        print("L'analyse de sentiment fonctionne en fran√ßais et en anglais")
        print("La g√©n√©ration de texte fonctionne avec les deux langues")
    else:
        print("Certains tests ont √©chou√©.")
        if not sentiment_ok:
            print("Mod√®le de sentiment non disponible")
        if not generation_ok:
            print("Mod√®le de g√©n√©ration non disponible")
    
    print("Pour utiliser l'application compl√®te:")
    print("   streamlit run app_front.py")

if __name__ == "__main__":
    main() 